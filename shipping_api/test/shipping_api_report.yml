-
  CHECK REPORT
-
  !python {model: stock.packages}: |
    ctx={}
    ctx.update({'model': 'stock.picking','active_ids': [ref('shipping_api.stock_picking_int0')]})
    data_dict = {}
    from tools import test_reports
    test_reports.try_report_action(cr, uid, 'shipping_api.package_packing_slip_print',wiz_data=data_dict, context=ctx, our_module='shipping_api')
-
  Check picking slip method call
-
  !python {model: stock.picking}: |
    picking_id = self.distribute_weight(cr, uid, [ref('stock_picking_int0')])
-
  I print a shipment report.
-
  !python {model: stock.picking}: |
    import netsvc, tools, os
    (data, format) = netsvc.LocalService('report.multiple.label.print').create(cr, uid, [ref('stock_picking_int0')], {}, {})
    if tools.config['test_report_directory']:
        file(os.path.join(tools.config['test_report_directory'], 'stock-picking_list'+format), 'wb+').write(data)
-
  CHECK REPORT
-
  !python {model: stock.picking}: |
    ctx={}
    ctx.update({'model': 'stock.picking','active_ids': [ref('stock_picking_int0')]})
    data_dict = {}
    from tools import test_reports
    test_reports.try_report_action(cr, uid, 'shipping_api.multiple_label_print',wiz_data=data_dict, context=ctx, our_module='shipping_api')
-
  CHECK REPORT
-
  !python {model: stock.packages}: |
    ctx={}
    ctx.update({'model': 'stock.picking','active_ids': [ref('stock_picking_int0')]})
    data_dict = {}
    from tools import test_reports
    test_reports.try_report_action(cr, uid, 'shipping_api.package_packing_slip_print',wiz_data=data_dict, context=ctx, our_module='shipping_api')
-

SHIPPING.py - shipping.move

CREATE method

WRITE method

-
  Create new Delivery Order
-
  !record {model: stock.picking.out, id: stock_picking_out_out18}:
    company_id: base.main_company
    date: '2013-08-26 15:30:00'
    invoice_state: none
    min_date: '2013-09-02 15:30:00'
    move_lines:
      - company_id: base.main_company
        create_date: '2013-08-26 11:27:22'
        date_expected: '2013-09-02 15:30:00'
        location_dest_id: stock.stock_location_customers
        location_id: stock.stock_location_stock
        name: '[CARD] Graphics Card'
        origin: SO026
        partner_id: base.res_partner_2
        procurements:
          - company_id: base.main_company
            date_planned: '2013-09-02 15:30:00'
            location_id: stock.stock_location_stock
            name: '[CARD] Graphics Card'
            note: '[CARD] Graphics Card'
            origin: SO026
            priority: '1'
            procure_method: make_to_stock
            product_id: product.product_product_24
            product_qty: 1.0
            product_uom: product.product_uom_unit
            product_uos: product.product_uom_unit
            product_uos_qty: 1.0
            state: confirmed
        product_id: product.product_product_24
        product_qty: 1.0
        product_uom: product.product_uom_unit
        product_uos: product.product_uom_unit
        product_uos_qty: 1.0
        state: done
    move_type: one
    name: OUT/00020
    origin: SO026
    partner_id: base.res_partner_2
    state: done
    stock_journal_id: stock.journal_delivery
    type: out
    logis_company: shipping_api.logistic_company_1
    ship_company_code: ups
    freight: True
    sat_delivery: True
    with_ret_service: True
    bill_shipping: shipper
    ups_use_cc: True
    comm_inv: True
    comm_code: 004
    inv_option: '02'
    exp_carrier: post
    ship_state: draft




-
  I Create a record for partner's company.(partner.address.validation)
- 
  !record {model: res.company, id: base.main_company}:
    currency_id: base.EUR
    address_validation_method: ups.account
    lzipmatch: true
    name: Your Company
    paper_format: us_letter
    partner_id: base.main_partner
    po_lead: 1.0
    schedule_range: 80.0
    security_lead: 0.0

